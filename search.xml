<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2022 Hexo &amp; Github 搭建Blog</title>
    <url>/article/59607.html</url>
    <content><![CDATA[<p>Hexo是一款著名的博客框架，其一向以简洁快速著称，我的博客就是以它为基础搭建的，而且全程不需要花一分钱<br>文字教程</p>
<h1 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h1><ul>
<li><input disabled="" type="checkbox"> 一台电脑（废话）</li>
<li><input disabled="" type="checkbox"> node.js的环境</li>
<li><input disabled="" type="checkbox"> 一个Github账号</li>
<li><input disabled="" type="checkbox"> Git</li>
<li><input checked="" disabled="" type="checkbox"> 一个聪明的大脑（我相信你一定有的）</li>
</ul>
<h1 id="前期准备步骤"><a href="#前期准备步骤" class="headerlink" title="前期准备步骤"></a>前期准备步骤</h1><p><strong>Node.js官网下载</strong><br><a href="http://nodejs.cn/download/">Node.js</a><br>选择你所使用的系统和他相应的安装包。windows建议msi<br>安装好后打开终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>如果有版本号就说明安装成功</p>
<p><strong>Git官网下载</strong><br><a href="https://git-scm.com/">GIt</a></p>
<p>准备好的话就可以开始搭建了</p>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p><strong>新建博客文件夹</strong><br>在任何地方新建一个文件夹，名称随意，这里建议不要放在C盘，我的名称叫Blog，你也可以使用这个名字（随便起但你要记住）<br><strong>下载Hexo文件</strong><br>打开windows终端，cd到你的博客文件夹<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p>跑完命令后输入<code>hexo -v</code>检查是否安装成功，显示版本号即为成功<br>接着输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>不出意外的话，最后一句话应该是“Start blogging with Hexo!”<br><del><em>如果没有的话，不出意外，应该是出意外了</em></del><br>如果你成功了，这时你的文件夹里应该会出现一堆文件<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>并打开浏览器访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>
<p>就可以看到你的博客在本地运行起来了，好好欣赏一下吧<br>欣赏完必须关闭它，不要急着关闭终端，按下<br><code>Ctrl</code>+<code>C</code><br>他就会关闭了<br><strong>修改配置文件</strong><br>打开终端cd到博客文件夹，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>并访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>
<p>现在在终端按下<code>Ctrl</code>+<code>C</code>来停止本地访问<br>下面来更改博客的内容<br>打开<code>_config.yml</code>文件，同时对照以下列表修改内容</p>
<p><code>title</code> 网站标题</p>
<p><code>subtitle</code> 网站副标题</p>
<p><code>description</code> 网站描述</p>
<p><code>keywords</code> 网站的关键词。支持多个关键词。</p>
<p><code>author</code> 您的名字</p>
<p><code>language</code> 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有  <code>zh-Hans</code>和  <code>zh-CN</code>。</p>
<p><code>timezone</code> 网站时区。Hexo 默认使用您电脑的时区。请参考  <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a>  进行设置，如  <code>America/New_York</code>,  <code>Japan</code>, 和  <code>UTC</code>  。一般的，对于中国大陆地区可以使用  <code>Asia/Shanghai</code>。<br>更改好后保存退出，同样执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>并访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>
<p>   但你一定要记住，执行完<code>hexo s</code>的命令后一定不要关闭终端，在你想停止本地访问的时候切到终端按下熟悉的<code>Ctrl</code>+<code>C</code><br>  <strong>上传到Github开启访问</strong><br>  用资源管理器打开你的博客文件夹并右键选择<code>Git bash here</code>，如果没有该选项，请检查你的git安装是否正确<br>打开后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C “你注册github时的邮箱”</span><br></pre></td></tr></table></figure>
<p>按回车，出现内容再按回车，出现内容再按回车，出现内容再按回车，四次回车，好的<br>出现ssh的方框框就说明成功了<br>资源管理器打开<br>C:\用户（或者User）\你的用户名.ssh<br>在这个文件夹里找到一个名为<code>id.rsa.pub</code>的文件，不要找错了，注意看下右侧的时间，要和你生成key的时间相吻合。打开那个文件复制里面的全部内容<br>打开浏览器，github，登陆一下<br>点击右上角头像旁的小三角，选择<code>setting</code><br>在出现的页面左侧选择<code>SSH and GPG keys</code><br>点击右侧<code>New SSH Key</code><br>title随便起个名字，把你刚才复制的那一大长串字粘贴到下面的<code>key</code>栏<br>点击<code>add ssh key</code>保存即可<br>打开你的git bash，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>如果出现了你的github用户名说明绑定成功，可以进行下一步骤<br>打开github，新建一个仓库（不是吧，你不会连仓库都不会建吧？？）<br>起名为<code>你的github用户名.github.io</code><br>并开启生成README文件<br>选择public<br>创建仓库<br>下面进行仓库连接<br>复制你的仓库网址，打开本地博客文件夹里的<code>_config.yml</code><br>把最后一行的</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">你的仓库链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
<p>保存并退出<br>打开windwos终端，cd到你的博客文件夹<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer–git --save</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>你可以挨个试试，第一个报错了就用第二个<br>完成后输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>生成页面，再输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>他就开始向github上传文件了<br>你可以打开github看看你的仓库，如果里面出现一些文件就说明成功了<br>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://你的github用户名.github.io</span><br></pre></td></tr></table></figure>
<p>这就是你的博客了，成功！</p>
<h1 id="写作方法"><a href="#写作方法" class="headerlink" title="写作方法"></a>写作方法</h1><p>Hexo博客的文章撰写采取markdown格式，所以我们需要一个markdown编辑器，网上有很多，可以找找，我用的是<code>Stack Edit</code>，一款在线编辑器，他有下载到桌面的功能，可以满足我们的基础使用<br>打开windows终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;你的新文章的标题&quot;</span></span><br></pre></td></tr></table></figure>
<p>这样就新建了一个文章，打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">博客文件夹\source\_posts</span><br></pre></td></tr></table></figure>
<p>里面就是存放文章的地方，你可以看到一个和你刚刚创建的文章同名的md文件，打开它开始编辑吧<br>编辑完成后保存退出，打开windows终端，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>
<p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure>
<p>预览一下你的文章，确认无误后，再在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo clean &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>等待一会你的文章就上传完毕了，打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你的github用户名.github.io</span><br></pre></td></tr></table></figure>
<p>即可看到你的博客啦</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi Pico 制作 BADusb</title>
    <url>/article/50956.html</url>
    <content><![CDATA[<h1 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h1><ul>
<li>Raspberry Pi Pico （真的很便宜，帮焊接引脚的30r左右，不带引脚的20r左右）</li>
<li>一台电脑</li>
<li>数据线 （一定是要可以插进Pico板的线）</li>
</ul>
<h1 id="烧录CircuitPython"><a href="#烧录CircuitPython" class="headerlink" title="烧录CircuitPython"></a>烧录CircuitPython</h1><p>下载CircuitPython<br><a href="https://downloads.circuitpython.org/bin/raspberry_pi_pico/en_US/adafruit-circuitpython-raspberry_pi_pico-en_US-7.3.3.uf2">CircuitPython</a><br>下载好后，按住pico板上的<code>BOOTSEL</code>按钮，一定要按住，按住的同时把pico用数据线和电脑连接，电脑没有识别到他之前都不要松手！<br>不出意外，你的电脑应该会把它识别为一个大容量存储设备<br>打开它，并把刚才下载的CircuitPython文件(是uf2后缀)的文件拖入到pico的文件夹里，这时pico会自动重启，表现为窗口突然关闭，等待一会，文件夹窗口又出现，里面多出几个文件，说明烧录成功</p>
<h1 id="为Pico安装HID库"><a href="#为Pico安装HID库" class="headerlink" title="为Pico安装HID库"></a>为Pico安装HID库</h1><p>其实，这个Pico BADusb的原理就是利用HID，模拟人的键鼠输入来达到做某些事的目的，也就是说，任何你可以用键盘鼠标完成的事，他都可以干，只不过是合不合法的问题<br>下载HID库<br><a href="https://github.com/adafruit/Adafruit_CircuitPython_Bundle/releases/download/20221214/adafruit-circuitpython-bundle-7.x-mpy-20221214.zip">HID库</a><br>下载好后解压，打开里面的<code>lib</code>目录找到<code>adafruit_hid</code>、<code>adafruit_debouncer.mpy</code>、<code>adafruit_ticks.mpy</code>和<code>asyncio</code>这四个东西，你不需要知道他们是什么，只需要把它们复制或剪切到pico的<code>lib</code>目录下，好的，完成了吗？</p>
<h1 id="为Pico导入执行Python文件"><a href="#为Pico导入执行Python文件" class="headerlink" title="为Pico导入执行Python文件"></a>为Pico导入执行Python文件</h1><p>下载文件包<br><a href="https://github.com/dbisu/pico-ducky/archive/refs/heads/main.zip">文件包</a><br>解压他，并把里面的<code>duckyinpython.py</code>拖到pico的文件夹下，就是pico的根目录，拖动好后删除原来的<code>code.py</code>并把<code>duckyinpython.py</code>改名为<code>code.py</code><br>好的，现在你只差最后一步就可以完工了</p>
<h1 id="写入待执行文件"><a href="#写入待执行文件" class="headerlink" title="写入待执行文件"></a>写入待执行文件</h1><p>打开任何编辑器开始编辑你的待执行文件吧，在编写好后意味着，一旦插入这个pico，他将执行那里面的所有代码<br>在编写前，先了解几个简单的语法<br><code>DELAY 毫秒</code> 延迟时间，可以用在两个命令的中间，后面的毫秒就是他要延迟的时间<br><code>GUI r</code> 相当于快捷键<code>Win</code>+<code>R</code><br><code>STRING 文本</code> 输入的文本，后面跟的字就是他会模拟键盘输入输入那些字符<br><code>ENTER</code> 按下回车键<br><code>CTRL</code> 按下CTRL键<br><code>字母</code> 按下某个字母（你指定）<br>这些是比较基础的<br>如果是ctrl组合的快捷键，那么就是<br><code>CTRL 快捷键的第二个键</code><br>这里面的关键字字符全部是大写<br>一行写一个<br>写好后保存名为<code>payload.dd</code><br>这里分享我写的一个简单的rickroll恶搞，具体就是运行cmd打开b站的网址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELAY 20</span><br><span class="line">CTRL ESC</span><br><span class="line">DELAY 250</span><br><span class="line">STRING cmd</span><br><span class="line">DELAY 250</span><br><span class="line">ENTER</span><br><span class="line">ENTER</span><br><span class="line">DELAY 1500</span><br><span class="line">STRING start https://www.bilibili.com/video/BV1GJ411x7h7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1e8b094d8bdec0395a59bec11eeecc6a</span><br><span class="line">ENTER</span><br></pre></td></tr></table></figure>
<p>翻译</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">等待20毫秒</span><br><span class="line">按下CTRL + ESC调出搜索窗口</span><br><span class="line">等待250毫秒</span><br><span class="line">输入 cmd</span><br><span class="line">回车</span><br><span class="line">回车</span><br><span class="line">等待1500毫秒</span><br><span class="line">输入 start https://www.bilibili.com/video/BV1GJ411x7h7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=1e8b094d8bdec0395a59bec11eeecc6a</span><br><span class="line">回车</span><br></pre></td></tr></table></figure>
<p>你也可以试试<br>保存为<code>payload.dd</code>后把它拖入pico的根目录，这时！！！这时你记住！！一定在拖进去并且确认他已经在里面的一瞬间，拔掉你的pico！！！以免他提前运行<br>好了<br>现在你的BADusb就制作完成了，把他连接到你的电脑试试吧！</p>
<h1 id="把pico恢复原样或者进行脚本编辑"><a href="#把pico恢复原样或者进行脚本编辑" class="headerlink" title="把pico恢复原样或者进行脚本编辑"></a>把pico恢复原样或者进行脚本编辑</h1><p>你肯定想过，一旦插上他就会以我也不知道多少的输入速度执行里面的命令！！！如果你写的脚本相当狠的话，那就寄了（<br>那么怎么重新编辑里面的脚本或者怎么恢复原样呢？<br>很简单<br>把他拔下来，按住<code>BOOTSEL</code>键再连接回去，和这篇文章开头的过程一样，这时，下载这个文件<br><a href="https://cdn-learn.adafruit.com/assets/assets/000/099/419/original/flash_nuke.uf2?1613329170">恢复文件</a><br>下载好后，把他拖进pico根目录，它就会自动重启，恢复完成！</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>BADUSB</tag>
      </tags>
  </entry>
  <entry>
    <title>John The Ripper &amp;&amp; Crunch 破解zip密码</title>
    <url>/article/59491.html</url>
    <content><![CDATA[<p>相信大家一定遇到过好不容易下载到的非常棒的项目源码等资源，想立刻部署来玩一玩，可是源码需要密码才能解压的这种情况，今天说说怎么破解它<br>纯文字教程</p>
<h1 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h1><ul>
<li>Kali（物理机或虚拟机都可以）</li>
<li>John The Ripper和Zip2john模块</li>
<li>一个待破解的zip压缩包</li>
<li>Crunch</li>
</ul>
<p>Kali Linux是基于Debian的Linux发行版， 设计用于数字取证操作系统，并且预装了许多渗透测试软件，John和Crunch就是其中的两个小工具，主要用于密码的爆破，zip2john是john的zip破解模块，也是kali自带的，无需手动安装</p>
<h1 id="破解过程"><a href="#破解过程" class="headerlink" title="破解过程"></a>破解过程</h1><p>将你要破解的zip压缩包放到一个方便你找到的地方<br>并打开终端cd到该目录，我把它放在了桌面，我建议你也这么做，那么就直接右键桌面选择在此处打开终端即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ ls</span><br><span class="line">code.desktop  Pycharm.desktop  rockyou.txt  test.zip</span><br><span class="line">                                                              </span><br><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个<code>test.zip</code>就是我们待破解的压缩包，他的密码已经提前进行了设置，这个密码我也不知道，是我闭上眼随便写的，下面我们对它进行破解操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ zip2john test.zip &gt; test.hash</span><br><span class="line">ver 1.0 test.zip/test/ is not encrypted, or stored with non-handled compression type</span><br><span class="line">                                                              </span><br><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ ls</span><br><span class="line">code.desktop     rockyou.txt  test.zip</span><br><span class="line">Pycharm.desktop  test.hash</span><br></pre></td></tr></table></figure>
<p>输入<br><code>zip2john 待破解的zip文件名 &gt; 生成hash值后存入的文件名</code><br>这个hash值得存放文件得后缀你可以写<code>hash</code>或<code>txt</code><br>回车后会在桌面生成一个与你输入同名的<code>xxx.hash</code>文件，那里面就是这个zip的哈希值了<br>你可以输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat hash文件名.hash</span><br></pre></td></tr></table></figure>
<p>来查看内容是否正确，正不正确咱们光看也看不出来，你只需要看看里面有没有东西就可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ cat test.hash </span><br><span class="line">test.zip/test/test.txt:$zip2$*0*3*0*f8b779326ab33928aabc35732200a01e*1663*41*9845267a7d8c5dbf725ba89bfd85219c7163539471ddfcd21ecfd1dd9463ac258395fb68e1cc4272f5d22b253652c17db7c0cbe420d581f8095fd3bedba5346b0a*dbcd543a497351da6218*$/zip2$:test/test.txt:test.zip:test.zip</span><br></pre></td></tr></table></figure>
<p>成功录入的效果↑<br>这时就可以开始正式的破解了<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john 你的hash文件名</span><br></pre></td></tr></table></figure>
<p>即可进行破解，现在他进行字典爆破的字典在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/share/john/password.lst</span><br></pre></td></tr></table></figure>
<p>的位置，这是john的默认字典<br>但是这种直接输入john的方法只适合破解弱密码，如果是复杂一点或者长一点的可能就解不出来了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ john test.hash </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password hash (ZIP, WinZip [PBKDF2-SHA1 256/256 AVX2 8x])</span><br><span class="line">Cost 1 (HMAC size) is 65 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Proceeding with single, rules:Single</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">Almost done: Processing the remaining buffered candidate passwords, if any.</span><br><span class="line">Proceeding with wordlist:/usr/share/john/password.lst</span><br><span class="line">Proceeding with incremental:ASCII</span><br></pre></td></tr></table></figure>
<p>比如我的这个就有点复杂，不过没关系<br>现在咱们就需要用到<code>Crunch</code>这个工具了，他准确来说应该是一个字典生成工具，可以根据你的需求进行完全的自定义字典，这里如何生成不多赘述，只讲一讲纯数字密码字典的生成<br>在终端输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crunch 起始的数字位数 结束的数字位数 需要用到的数字 -o 生成后的字典名.txt</span><br></pre></td></tr></table></figure>
<p>例如，我不知道我设置的密码是什么，但我记得大概是7-8位的数字，我们可以输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crunch 7 8 0123456789 -o pwd.txt</span><br></pre></td></tr></table></figure>
<p>那么返回结果是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ crunch 7 8 0123456789 -o pwd.txt </span><br><span class="line">Crunch will now generate the following amount of data: 980000000 bytes</span><br><span class="line">934 MB</span><br><span class="line">0 GB</span><br><span class="line">0 TB</span><br><span class="line">0 PB</span><br><span class="line">Crunch will now generate the following number of lines: 110000000 </span><br><span class="line"></span><br><span class="line">crunch:  25% completed generating output</span><br><span class="line"></span><br><span class="line">crunch:  48% completed generating output</span><br><span class="line"></span><br><span class="line">crunch:  75% completed generating output</span><br><span class="line"></span><br><span class="line">crunch:  97% completed generating output</span><br><span class="line"></span><br><span class="line">crunch: 100% completed generating output</span><br><span class="line">                                                                </span><br><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ l </span><br><span class="line">code.desktop*  Pycharm.desktop*  test.hash</span><br><span class="line">pwd.txt        rockyou.txt*      test.zip*</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这里的pwd.txt就是生成的字典了，简单解读一下</p>
<p>crunch 不用多说是自动这个工具<br>7 是起始位数，注意，这里是位数，不是起始数<br>8 结束位数<br>0123456789 字典内密码的组成，全部是用这些数字组成的<br>-o 将密码保存到指定文件的参数<br>pwd.txt 最后生成的字典名</p>
<p>切记，如果你知道密码位数的话一定把范围缩小到位数里，不要从1开始生成，不然一个小时也生成不完<br>生成完字典后我们要引用字典进行爆破了<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">John --wordlist=你的字典名 你的hash值存储文件名</span><br></pre></td></tr></table></figure>
<p>执行即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(v1nny㉿v1nny)-[~/桌面]</span><br><span class="line">└─$ john --wordlist=pwd.txt test.hash </span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Loaded 1 password hash (ZIP, WinZip [PBKDF2-SHA1 256/256 AVX2 8x])</span><br><span class="line">Cost 1 (HMAC size) is 35 for all loaded hashes</span><br><span class="line">Will run 4 OpenMP threads</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">1598526          (test.zip/test/test.txt)     </span><br><span class="line">1g 0:00:00:37 DONE (2022-12-13 16:00) 0.02698g/s 43325p/s 43325c/s 43325C/s 1597440..1605631</span><br><span class="line">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class="line">Session completed.</span><br></pre></td></tr></table></figure>
<p>好的密码已经爆破出来了，是<code>1598526</code>，在你的终端上会以黄色字显示出来<br>使用此密码解压后，里面的东西也没有损坏，非常完美<br>如果这些字典都不符合你的要求，你可以在桌面的<code>应用程序</code>处，搜索<code>wordlists</code>，找到同名程序，点击它即可显示出你的kali中的所有内置字典，信息量非常巨大，值得一试<br>如果上述所有方法还是不能成功爆破，那么就请放弃吧。。。</p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>JohnTheRipper</tag>
      </tags>
  </entry>
  <entry>
    <title>WindowsApps权限出错的修复记录</title>
    <url>/article/89fcca78.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>我认为Linux下的<code>Ctrl</code>+<code>Alt</code>+<code>T</code>打开终端这个设计非常的好，非常的人性化，反观Windows（<br>有点那啥了<br>于是我就想给我的Win<del>祖宗</del>设置一个同款快捷键<br>在win上我喜欢用<strong>Windows Terminal</strong>这个工具搭配<strong>Git Bash</strong><br>至于为啥用<strong>Git Bash</strong>，谁叫人家自带<strong>Nano</strong>，<strong>Vim</strong>等好用的工具呢~<br><strong>Windows Terminal</strong>在win11里变成了系统自带的工具，甚至被设置成了默认的，不过它的安装来源却是<strong>Microsoft Store</strong>，就比较该死（<br>因为这里面安装的软件，除非你自定义了安装路径，否则他们都会被安装在C盘下的一个<strong>WindowsApps</strong>目录里，最该死的事发生了，这个破目录权限出奇的高，就是说不改权限就甭想访问它，但是如果手贱改了权限，改成了<code>Everyone</code>，那就会像我一样，<code>Win</code>+<code>R</code>后输入<code>wt</code>就再也打不开终端了 T~T</p>
<p>我试着把权限改回原来的那一长串，但是根本不管用<br>不过！！不过！！！我找到了方法，记录下~嘿嘿ヾ(≧▽≦*)o</p>
<blockquote>
<p>感谢你听我说了这么多废话</p>
</blockquote>
<h1 id="修复过程"><a href="#修复过程" class="headerlink" title="修复过程"></a>修复过程</h1><p>别的方法都不用试了，直接打开注册表<br>定位到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\wt.exe</span><br></pre></td></tr></table></figure>
<p>看见右边那两个东西了么，就是它俩导致你Wt命令不管用的！！<br>双击<code>默认</code>两字<br>把数值数据改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Local\Microsoft\WindowsApps\wt.exe</span><br></pre></td></tr></table></figure>
<p>如果你不知道你的用户名<br>那么打开cmd，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure>
<p>显示的就是用户名了<br>更改好<code>默认</code>项后，来更改<code>Path</code><br>同样的方法，改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\你的用户名\AppData\Local\Microsoft\WindowsApps</span><br></pre></td></tr></table></figure>

<h1 id="完事儿收工"><a href="#完事儿收工" class="headerlink" title="完事儿收工~~"></a>完事儿收工~~</h1><blockquote>
<p>衷心提示：别惯着Windows！！</p>
</blockquote>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>WindowsApps</tag>
        <tag>修复</tag>
        <tag>权限</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下Nano编辑器的安装及使用</title>
    <url>/article/ac915a67.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>三年前，我在看一位外国大佬的教学视频时了解到了<strong>Nano</strong>这款编辑器<br><del>那个大佬真的很爱用这个东西（</del><br>当我第一次看到它的时候，就喜欢上了它<br><strong>Nano</strong>对于新手来说，没有初次打开的<strong>Vim</strong>那种恐惧感，相反，它给人一种清新简单且人性化的感觉，整个页面的设计很简单，上面是一个标题栏，下面是两行快捷键提示和一行简短的信息框<br><img data-src="/imgs/winnano-1.jpg" alt="1"><br>背景是我自己配置的，是直接配置的终端背景<br>这个行号显示也需要自己配置，不过相当的简单，配置全程只需要你按一下<strong>退格键</strong><br><strong>Nano</strong>的语法高亮也是十分的好用，它还内置了<strong>拼写检查</strong>，<strong>自动补全</strong>等功能，这些功能在vim上全部是需要自己配置，而在<strong>Nano</strong>里，它内置！</p>
<blockquote>
<p>感谢你听我说完这些废话</p>
</blockquote>
<h1 id="Win下的安装"><a href="#Win下的安装" class="headerlink" title="Win下的安装"></a>Win下的安装</h1><p>由于<strong>Nano</strong>原本是Linux下的软件，所以在Win中无法通过安装包的方式下载，不过<strong>Git Bash</strong>内置了<strong>Nano</strong>工具，完美的解决了这个问题<br><a href="https://git-scm.com/download">Windows Git下载</a><br>安装好后直接打开<strong>Git Bash</strong>输入Nano即可使用</p>
<h1 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h1><p>刚刚我说过了，在<strong>Nano</strong>中，开启显示行号的功能甚至不用输入多余的东西，只需要一个<strong>退格键</strong><br>打开<strong>Git</strong>的安装目录中的<code>etc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\Git\etc</span><br></pre></td></tr></table></figure>
<p>你会发现里面有如下的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">|-- DIR_COLORS</span><br><span class="line">|-- bash.bash_logout</span><br><span class="line">|-- bash.bashrc</span><br><span class="line">|-- docx2txt.config</span><br><span class="line">|-- fstab</span><br><span class="line">|-- gitattributes</span><br><span class="line">|-- gitconfig</span><br><span class="line">|-- hosts</span><br><span class="line">|-- inputrc</span><br><span class="line">|-- install-options.txt</span><br><span class="line">|-- msystem</span><br><span class="line">|-- mtab</span><br><span class="line">|-- nanorc</span><br><span class="line">|-- networks</span><br><span class="line">|-- nsswitch.conf</span><br><span class="line">|-- package-versions.txt</span><br><span class="line">|-- pkcs11</span><br><span class="line">|   `-- pkcs11.conf.example</span><br><span class="line">|-- pki</span><br><span class="line">|   `-- ca-trust</span><br><span class="line">|       `-- extracted</span><br><span class="line">|           |-- java</span><br><span class="line">|           |   `-- cacerts</span><br><span class="line">|           |-- openssl</span><br><span class="line">|           |   `-- ca-bundle.trust.crt</span><br><span class="line">|           `-- pem</span><br><span class="line">|               |-- email-ca-bundle.pem</span><br><span class="line">|               |-- objsign-ca-bundle.pem</span><br><span class="line">|               `-- tls-ca-bundle.pem</span><br><span class="line">|-- profile</span><br><span class="line">|-- profile.d</span><br><span class="line">|   |-- aliases.sh</span><br><span class="line">|   |-- bash_profile.sh</span><br><span class="line">|   |-- env.sh</span><br><span class="line">|   |-- git-prompt.sh</span><br><span class="line">|   |-- lang.sh</span><br><span class="line">|   |-- perlbin.csh</span><br><span class="line">|   `-- perlbin.sh</span><br><span class="line">|-- protocols</span><br><span class="line">|-- services</span><br><span class="line">|-- ssh</span><br><span class="line">|   |-- moduli</span><br><span class="line">|   |-- ssh_config</span><br><span class="line">|   `-- sshd_config</span><br><span class="line">|-- tigrc</span><br><span class="line">`-- vimrc</span><br><span class="line"></span><br><span class="line">9 directories, 37 files</span><br></pre></td></tr></table></figure>
<p>别的一律不用看，打开<code>nanorc</code><br>会有如下配置<br><a href="#%E5%BC%80%E5%90%AF%E8%A1%8C%E5%8F%B7%E6%98%BE%E7%A4%BA">点我直接跳转到操作步骤</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Sample initialization file for GNU nano.</span><br><span class="line">##</span><br><span class="line">## For the options that take parameters, the default value is shown.</span><br><span class="line">## Other options are unset by default.  To make sure that an option</span><br><span class="line">## is disabled, you can use &quot;unset &lt;option&gt;&quot;.</span><br><span class="line">##</span><br><span class="line">## Characters that are special in a shell should not be escaped here.</span><br><span class="line">## Inside string parameters, quotes should not be escaped -- the last</span><br><span class="line">## double quote on the line will be seen as the closing quote.</span><br><span class="line"></span><br><span class="line">## Make &#x27;nextword&#x27; (Ctrl+Right) and &#x27;chopwordright&#x27; (Ctrl+Delete)</span><br><span class="line">## stop at word ends instead of at beginnings.</span><br><span class="line"># set afterends</span><br><span class="line"></span><br><span class="line">## When soft line wrapping is enabled, make it wrap lines at blanks</span><br><span class="line">## (tabs and spaces) instead of always at the edge of the screen.</span><br><span class="line"># set atblanks</span><br><span class="line"></span><br><span class="line">## Automatically indent a newly created line to the same number of</span><br><span class="line">## tabs and/or spaces as the preceding line -- or as the next line</span><br><span class="line">## if the preceding line is the beginning of a paragraph.</span><br><span class="line"># set autoindent</span><br><span class="line"></span><br><span class="line">## Back up files to the current filename plus a tilde.</span><br><span class="line"># set backup</span><br><span class="line"></span><br><span class="line">## The directory to put unique backup files in.</span><br><span class="line"># set backupdir &quot;&quot;</span><br><span class="line"></span><br><span class="line">## Use bold text instead of reverse video text.</span><br><span class="line"># set boldtext</span><br><span class="line"></span><br><span class="line">## Treat any line with leading whitespace as the beginning of a paragraph.</span><br><span class="line"># set bookstyle</span><br><span class="line"></span><br><span class="line">## The characters treated as closing brackets when justifying paragraphs.</span><br><span class="line">## This may not include any blank characters.  Only closing punctuation,</span><br><span class="line">## optionally followed by these closing brackets, can end sentences.</span><br><span class="line"># set brackets &quot;&quot;&#x27;)&gt;]&#125;&quot;</span><br><span class="line"></span><br><span class="line">## Automatically hard-wrap the current line when it becomes overlong.</span><br><span class="line"># set breaklonglines</span><br><span class="line"></span><br><span class="line">## Do case-sensitive searches by default.</span><br><span class="line"># set casesensitive</span><br><span class="line"></span><br><span class="line">## Constantly display the cursor position in the status bar or minibar.</span><br><span class="line"># set constantshow</span><br><span class="line"></span><br><span class="line">## Use cut-from-cursor-to-end-of-line by default.</span><br><span class="line"># set cutfromcursor</span><br><span class="line"></span><br><span class="line">## Do not use the line below the title bar, leaving it entirely blank.</span><br><span class="line"># set emptyline</span><br><span class="line"></span><br><span class="line">## Set the target width for automatic hard-wrapping and for justifying</span><br><span class="line">## paragraphs.  If the specified value is 0 or less, the wrapping point</span><br><span class="line">## will be the terminal&#x27;s width minus this number.</span><br><span class="line"># set fill -8</span><br><span class="line"></span><br><span class="line">## Draw a vertical stripe at the given column, to help judge text width.</span><br><span class="line">## (This option does not have a default value.)</span><br><span class="line"># set guidestripe 75</span><br><span class="line"></span><br><span class="line">## Remember the used search/replace strings for the next session.</span><br><span class="line"># set historylog</span><br><span class="line"></span><br><span class="line">## Display a &quot;scrollbar&quot; on the righthand side of the edit window.</span><br><span class="line"># set indicator</span><br><span class="line"></span><br><span class="line">## Scroll the buffer contents per half-screen instead of per line.</span><br><span class="line"># set jumpyscrolling</span><br><span class="line"></span><br><span class="line">## Display line numbers to the left (and any anchors in the margin).</span><br><span class="line">#set linenumbers</span><br><span class="line"></span><br><span class="line">## Enable vim-style lock-files.  This is just to let a vim user know you</span><br><span class="line">## are editing a file [s]he is trying to edit and vice versa.  There are</span><br><span class="line">## no plans to implement vim-style undo state in these files.</span><br><span class="line"># set locking</span><br><span class="line"></span><br><span class="line">## Fall back to slow libmagic to try and determine an applicable syntax.</span><br><span class="line"># set magic</span><br><span class="line"></span><br><span class="line">## The opening and closing brackets that are found by a matching-bracket</span><br><span class="line">## search.  This may not contain blank characters.  The opening brackets</span><br><span class="line">## must come before the closing ones, and they must be in the same order.</span><br><span class="line"># set matchbrackets &quot;(&lt;[&#123;)&gt;]&#125;&quot;</span><br><span class="line"></span><br><span class="line">## Suppress the title bar and show the filename plus a cursor-position</span><br><span class="line">## percentage in the space of the status bar.</span><br><span class="line"># set minibar</span><br><span class="line"></span><br><span class="line">## Enable mouse support, if available for your system.  When enabled,</span><br><span class="line">## mouse clicks can be used to place the cursor, set the mark (with a</span><br><span class="line">## double click), and execute shortcuts.  The mouse will work in the</span><br><span class="line">## X Window System, and on the console when gpm is running.</span><br><span class="line"># set mouse</span><br><span class="line"></span><br><span class="line">## Switch on multiple file buffers (inserting a file will put it into</span><br><span class="line">## a separate buffer).</span><br><span class="line"># set multibuffer</span><br><span class="line"></span><br><span class="line">## Don&#x27;t convert files from DOS/Mac format.</span><br><span class="line"># set noconvert</span><br><span class="line"></span><br><span class="line">## Don&#x27;t display the helpful shortcut lists at the bottom of the screen.</span><br><span class="line"># set nohelp</span><br><span class="line"></span><br><span class="line">## Don&#x27;t automatically add a newline when a file does not end with one.</span><br><span class="line"># set nonewlines</span><br><span class="line"></span><br><span class="line">## Set operating directory.  nano will not read or write files outside</span><br><span class="line">## this directory and its subdirectories.  Also, the current directory</span><br><span class="line">## is changed to here, so any files are inserted from this dir.  A blank</span><br><span class="line">## string means the operating-directory feature is turned off.</span><br><span class="line"># set operatingdir &quot;&quot;</span><br><span class="line"></span><br><span class="line">## Remember the cursor position in each file for the next editing session.</span><br><span class="line"># set positionlog</span><br><span class="line"></span><br><span class="line">## Preserve the XON and XOFF keys (^Q and ^S).</span><br><span class="line"># set preserve</span><br><span class="line"></span><br><span class="line">## The characters treated as closing punctuation when justifying paragraphs.</span><br><span class="line">## This may not contain blank characters.  Only these closing punctuations,</span><br><span class="line">## optionally followed by closing brackets, can end sentences.</span><br><span class="line"># set punct &quot;!.?&quot;</span><br><span class="line"></span><br><span class="line">## Make status-bar messages disappear after 1 keystroke instead of after 20.</span><br><span class="line"># set quickblank</span><br><span class="line"></span><br><span class="line">## The regular expression that matches quoting characters in email</span><br><span class="line">## or line-comment introducers in source code.  The default is:</span><br><span class="line"># set quotestr &quot;^([ 	]*([!#%:;&gt;|&#125;]|//))+&quot;</span><br><span class="line"></span><br><span class="line">## Try to work around a mismatching terminfo terminal description.</span><br><span class="line"># set rawsequences</span><br><span class="line"></span><br><span class="line">## Fix Backspace/Delete confusion problem.</span><br><span class="line"># set rebinddelete</span><br><span class="line"></span><br><span class="line">## Do regular-expression searches by default.</span><br><span class="line">## Regular expressions are of the extended type (ERE).</span><br><span class="line"># set regexp</span><br><span class="line"></span><br><span class="line">## Save a changed buffer automatically on exit; don&#x27;t prompt.</span><br><span class="line"># set saveonexit</span><br><span class="line"></span><br><span class="line">## Put the cursor on the highlighted item in the file browser, and</span><br><span class="line">## show the cursor in the help viewer; useful for people who use a</span><br><span class="line">## braille display and people with poor vision.</span><br><span class="line"># set showcursor</span><br><span class="line"></span><br><span class="line">## Make the Home key smarter: when Home is pressed anywhere but at the</span><br><span class="line">## very beginning of non-whitespace characters on a line, the cursor</span><br><span class="line">## will jump to that beginning (either forwards or backwards).  If the</span><br><span class="line">## cursor is already at that position, it will jump to the true start</span><br><span class="line">## of the line (the left edge).</span><br><span class="line"># set smarthome</span><br><span class="line"></span><br><span class="line">## Spread overlong lines over multiple screen lines.</span><br><span class="line"># set softwrap</span><br><span class="line"></span><br><span class="line">## Use this spelling checker instead of the internal one.  This option</span><br><span class="line">## does not have a default value.</span><br><span class="line"># set speller &quot;aspell -x -c&quot;</span><br><span class="line"></span><br><span class="line">## Use the end of the title bar for some state flags: I = auto-indenting,</span><br><span class="line">## M = mark, L = hard-wrapping long lines, R = recording, S = soft-wrapping.</span><br><span class="line"># set stateflags</span><br><span class="line"></span><br><span class="line">## Use this tab size instead of the default; it must be greater than 0.</span><br><span class="line"># set tabsize 8</span><br><span class="line"></span><br><span class="line">## Convert each typed tab to the fitting number of spaces.</span><br><span class="line"># set tabstospaces</span><br><span class="line"></span><br><span class="line">## Snip whitespace at the end of lines when justifying or hard-wrapping.</span><br><span class="line"># set trimblanks</span><br><span class="line"></span><br><span class="line">## Save files by default in Unix format (also when they were DOS or Mac).</span><br><span class="line"># set unix</span><br><span class="line"></span><br><span class="line">## The two single-column characters used to display the first characters</span><br><span class="line">## of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in</span><br><span class="line">## ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.</span><br><span class="line">## The default when in a UTF-8 locale:</span><br><span class="line"># set whitespace &quot;»·&quot;</span><br><span class="line">## The default otherwise:</span><br><span class="line"># set whitespace &quot;&gt;.&quot;</span><br><span class="line"></span><br><span class="line">## Detect word boundaries differently by treating punctuation</span><br><span class="line">## characters as parts of words.</span><br><span class="line"># set wordbounds</span><br><span class="line"></span><br><span class="line">## The characters (besides alphanumeric ones) that should be considered</span><br><span class="line">## as parts of words.  This option does not have a default value.  When</span><br><span class="line">## set, it overrides option &#x27;set wordbounds&#x27;.</span><br><span class="line"># set wordchars &quot;&lt;_&gt;.&quot;</span><br><span class="line"></span><br><span class="line">## Let an unmodified Backspace or Delete erase the marked region (instead</span><br><span class="line">## of a single character, and without affecting the cutbuffer).</span><br><span class="line"># set zap</span><br><span class="line"></span><br><span class="line">## Hide the bars plus help lines and use the whole terminal as edit area.</span><br><span class="line"># set zero</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## Paint the interface elements of nano.  These are examples; there are</span><br><span class="line">## no colors by default, except for errorcolor and spotlightcolor.</span><br><span class="line">set titlecolor bold,white,blue</span><br><span class="line">set promptcolor lightwhite,grey</span><br><span class="line">set statuscolor bold,white,green</span><br><span class="line">set errorcolor bold,white,red</span><br><span class="line">set spotlightcolor black,lightyellow</span><br><span class="line">set selectedcolor lightwhite,magenta</span><br><span class="line">set stripecolor ,yellow</span><br><span class="line">set scrollercolor cyan</span><br><span class="line">set numbercolor cyan</span><br><span class="line">set keycolor cyan</span><br><span class="line">set functioncolor green</span><br><span class="line"></span><br><span class="line">## In root&#x27;s .nanorc you might want to use:</span><br><span class="line"># set titlecolor bold,white,magenta</span><br><span class="line"># set promptcolor black,yellow</span><br><span class="line"># set statuscolor bold,white,magenta</span><br><span class="line"># set errorcolor bold,white,red</span><br><span class="line"># set spotlightcolor black,orange</span><br><span class="line"># set selectedcolor lightwhite,cyan</span><br><span class="line"># set stripecolor ,yellow</span><br><span class="line"># set scrollercolor magenta</span><br><span class="line"># set numbercolor magenta</span><br><span class="line"># set keycolor lightmagenta</span><br><span class="line"># set functioncolor magenta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## === Syntax coloring ===</span><br><span class="line">## For all details, see &#x27;man nanorc&#x27;, section SYNTAX HIGHLIGHTING.</span><br><span class="line"></span><br><span class="line">## To include most of the existing syntax definitions, you can do:</span><br><span class="line">include &quot;/usr/share/nano/*.nanorc&quot;</span><br><span class="line"></span><br><span class="line">## Or you can select just the ones you need.  For example:</span><br><span class="line">include &quot;/usr/share/nano/html.nanorc&quot;</span><br><span class="line">include &quot;/usr/share/nano/python.nanorc&quot;</span><br><span class="line">include &quot;/usr/share/nano/sh.nanorc&quot;</span><br><span class="line"></span><br><span class="line">## In /usr/share/nano/extra/ you can find some syntaxes that are</span><br><span class="line">## specific for certain distros or for some less common languages.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## If &lt;Tab&gt; should always produce four spaces when editing a Python file,</span><br><span class="line">## independent of the settings of &#x27;tabsize&#x27; and &#x27;tabstospaces&#x27;:</span><br><span class="line"># extendsyntax python tabgives &quot;    &quot;</span><br><span class="line"></span><br><span class="line">## If &lt;Tab&gt; should always produce an actual TAB when editing a Makefile:</span><br><span class="line"># extendsyntax makefile tabgives &quot;	&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## === Key bindings ===</span><br><span class="line">## For all details, see &#x27;man nanorc&#x27;, section REBINDING KEYS.</span><br><span class="line"></span><br><span class="line">## If you want to suspend nano with one keystroke (instead of with ^T^Z):</span><br><span class="line"># bind ^Z suspend main</span><br><span class="line"></span><br><span class="line">## The &lt;Ctrl+Delete&gt; keystroke deletes the word to the right of the cursor.</span><br><span class="line">## On some terminals the &lt;Ctrl+Backspace&gt; keystroke produces ^H, which is</span><br><span class="line">## the ASCII character for backspace, so it is bound by default to the</span><br><span class="line">## backspace function.  The &lt;Backspace&gt; key itself produces a different</span><br><span class="line">## keycode, which is hard-bound to the backspace function.  So, if you</span><br><span class="line">## normally use &lt;Backspace&gt; for backspacing and not ^H, you can make</span><br><span class="line">## &lt;Ctrl+Backspace&gt; delete the word to the left of the cursor with:</span><br><span class="line"># bind ^H chopwordleft main</span><br><span class="line"></span><br><span class="line">## For a more mnemonic Comment keystroke (overriding Cut-from-cursor):</span><br><span class="line"># bind M-K comment main</span><br><span class="line"></span><br><span class="line">## If you want ^L to just refresh the screen and not center the cursor:</span><br><span class="line"># bind ^L refresh main</span><br><span class="line"></span><br><span class="line">## When you sometimes type M-J instead of M-K, or M-T instead of M-R:</span><br><span class="line"># unbind M-J main</span><br><span class="line"># unbind M-T main</span><br><span class="line">## (Those functions are still accessible through ^T^J and ^T^V.)</span><br><span class="line"></span><br><span class="line">## For quickly uppercasing or lowercasing the word under or after the cursor.</span><br><span class="line">## (These effectively select a word and pipe it through a sed command.)</span><br><span class="line">#bind Sh-M-U &quot;&#123;nextword&#125;&#123;mark&#125;&#123;prevword&#125;&#123;execute&#125;|sed &#x27;s/.*/\U&amp;/&#x27;&#123;enter&#125;&quot; main</span><br><span class="line">#bind Sh-M-L &quot;&#123;nextword&#125;&#123;mark&#125;&#123;prevword&#125;&#123;execute&#125;|sed &#x27;s/.*/\L&amp;/&#x27;&#123;enter&#125;&quot; main</span><br><span class="line"></span><br><span class="line">## For copying a marked region to the system clipboard:</span><br><span class="line"># bind Sh-M-T &quot;&#123;execute&#125;|xsel -ib&#123;enter&#125;&#123;undo&#125;&quot; main</span><br><span class="line"></span><br><span class="line">## For snipping trailing blanks when you save a file:</span><br><span class="line"># bind ^S &quot;&#123;execute&#125;| sed &#x27;s/\s\+$//&#x27; &#123;enter&#125;&#123;savefile&#125;&quot; main</span><br><span class="line"></span><br><span class="line">## If you would like nano to have keybindings that are more &quot;usual&quot;,</span><br><span class="line">## such as ^O for Open, ^F for Find, ^H for Help, and ^Q for Quit,</span><br><span class="line">## then uncomment these:</span><br><span class="line">#bind ^X cut main</span><br><span class="line">#bind ^C copy main</span><br><span class="line">#bind ^V paste all</span><br><span class="line">#bind ^Q exit all</span><br><span class="line">#bind ^S savefile main</span><br><span class="line">#bind ^W writeout main</span><br><span class="line">#bind ^O insert main</span><br><span class="line">#set multibuffer</span><br><span class="line">#bind ^H help all</span><br><span class="line">#bind ^H exit help</span><br><span class="line">#bind ^F whereis all</span><br><span class="line">#bind ^G findnext all</span><br><span class="line">#bind ^B wherewas all</span><br><span class="line">#bind ^D findprevious all</span><br><span class="line">#bind ^R replace main</span><br><span class="line">#bind ^Z undo main</span><br><span class="line">#bind ^Y redo main</span><br><span class="line">#unbind ^K main</span><br><span class="line">#unbind ^U all</span><br><span class="line">#unbind ^N main</span><br><span class="line">#unbind ^Y all</span><br><span class="line">#unbind M-J main</span><br><span class="line">#unbind M-T main</span><br><span class="line">#bind ^A mark main</span><br><span class="line">#bind ^P location main</span><br><span class="line">#bind ^T gotoline main</span><br><span class="line">#bind ^T gotodir browser</span><br><span class="line">#bind ^T cutrestoffile execute</span><br><span class="line">#bind ^L linter execute</span><br><span class="line">#bind ^E execute main</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="开启行号显示"><a href="#开启行号显示" class="headerlink" title="开启行号显示"></a>开启行号显示</h2><p>我说的没错吧，人家都给你把配置写好了，需要哪个，退格键把<code>#</code>删掉就好了<br>开启行号的话<br>这样改↓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set linenumbers</span><br></pre></td></tr></table></figure>
<p>即可</p>
<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p><strong>Nano</strong>的快捷键虽然没有vim多，但是也都很好用<br>注：<br><strong>^ &#x3D; Ctrl</strong><br><strong>M &#x3D; Alt</strong></p>
<table>
<thead>
<tr>
<th>功能</th>
<th>按键</th>
</tr>
</thead>
<tbody><tr>
<td>保存</td>
<td>^O</td>
</tr>
<tr>
<td>保存并退出</td>
<td>^X + Y + Enter</td>
</tr>
<tr>
<td>搜索</td>
<td>^W</td>
</tr>
<tr>
<td>替换</td>
<td>^\ 或 ^W + ^R</td>
</tr>
<tr>
<td>选中</td>
<td>Shift + 方向键</td>
</tr>
<tr>
<td>移动</td>
<td>方向键</td>
</tr>
<tr>
<td>复制</td>
<td>M6</td>
</tr>
<tr>
<td>剪切</td>
<td>^K</td>
</tr>
<tr>
<td>粘贴</td>
<td>^U</td>
</tr>
<tr>
<td>帮助</td>
<td>^G</td>
</tr>
<tr>
<td>跳转行</td>
<td>^&#x2F;</td>
</tr>
<tr>
<td>执行命令</td>
<td>^T</td>
</tr>
<tr>
<td>浏览文件目录</td>
<td>^R + ^T</td>
</tr>
</tbody></table>
<p><strong>这个执行命令我觉得比较好用的是ls，可以直接把当前目录所有文件名逐行写入当前文件~</strong></p>
<h1 id="先更到这咯"><a href="#先更到这咯" class="headerlink" title="先更到这咯~"></a>先更到这咯~</h1>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Nano</tag>
        <tag>windows</tag>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title>古老的聊天工具-IRC聊天室 使用教程</title>
    <url>/article/43469.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>在很久以前读凯文米特尼克的《反入侵的艺术》时，了解到了IRC这个东东，觉得很有意思，就想赶紧去试一试<br>奈何当时年少，有些东西不太能理解，看了许多教程都没学会<br>不久前，又想重新试试，成功了，在这里分享下过程</p>
<h1 id="下载一个好用的IRC客户端"><a href="#下载一个好用的IRC客户端" class="headerlink" title="下载一个好用的IRC客户端"></a>下载一个好用的IRC客户端</h1><p>手机端的推荐<br><code>IRCCloud</code>，谷歌商店里有<br>电脑端的推荐<br><code>Mozilla Thunderbird</code><br><a href="https://www.thunderbird.net/zh-CN/">Thunderbird下载</a><br>如果你想用hexirc也没有问题，原理都一样</p>
<h1 id="魔法"><a href="#魔法" class="headerlink" title="魔法"></a>魔法</h1><p>是的，你需要一个魔法，不过只用一下下就行，完成这步后就可以把魔法扔掉了</p>
<h1 id="激活Libera账号"><a href="#激活Libera账号" class="headerlink" title="激活Libera账号"></a>激活Libera账号</h1><p>打开魔法<br>访问<a href="https://libera.chat/">Libera官网</a><br>点击右上角的<code>Connect</code>并选择<code>Webchat</code><br>就会跳转到<a href="https://web.libera.chat/">这里</a>，当然你可以直接点击这个这里，跳转去激活<br>进入后<br>输入一个昵称，随便输<br>然后频道写</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#linuxba</span><br></pre></td></tr></table></figure>
<p>这是Linux吧的irc频道，你也可以选择别的，随便输入即可，只是为了激活<br>点击<code>开始</code><br>进入后，输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/nick 你的用户名</span><br></pre></td></tr></table></figure>
<p>然后输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/msg NickServ REGISTER 你的账号密码 你的邮箱</span><br></pre></td></tr></table></figure>
<p>回车后应该左侧会打开一个新的聊天<br>进入<br>这时查看你刚才写的邮箱收件箱，会有一个验证命令发过来<br>复制那个验证命令<br>在这个新的聊天中输入，回车，激活成功！</p>
<h1 id="使用Thunderbird登录账号"><a href="#使用Thunderbird登录账号" class="headerlink" title="使用Thunderbird登录账号"></a>使用Thunderbird登录账号</h1><p>打开Thunderbird，选择<code>聊天</code>，选择<code>入门</code>，填写你的用户名，昵称，密码等等，确定即可<br>等待连接完成就成功了</p>
<h1 id="隐藏IP"><a href="#隐藏IP" class="headerlink" title="隐藏IP"></a>隐藏IP</h1><p>血的教训啊！！我刚刚使用时没隐藏ip，频道里的一多半外国人都知道我来自中国了，甚至知道我来自哪个省份！<br>不过他们很热情，很贴心，教我怎么隐藏<br>所以啊，一定要cloak了<br>在<code>Thunderbird</code>里点击加入频道<br>在频道一栏写</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#libera-cloak</span><br></pre></td></tr></table></figure>
<p>进入频道，输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">!cloakme</span><br></pre></td></tr></table></figure>
<p>他会把你踢出频道，这就成功了，隐藏成功</p>
<p>另外说一下，那几个外国人怎么查到我ip的<br>其实这些默认都是公开的<br>在频道中输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/whois 你要查的用户名</span><br></pre></td></tr></table></figure>
<p>即可查到那个用户的ip，不过大多数人都开了cloak，查不到</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>IRC</tag>
        <tag>Thunderbird</tag>
        <tag>chatroom</tag>
        <tag>internet</tag>
        <tag>irc聊天室</tag>
        <tag>频道</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派4B--xrdp远程连接黑屏解决方案</title>
    <url>/article/5776.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>今天我的树莓派4B维修回来了，想赶紧装上系统试一试<br>安装完成后使用xrdp连接，可是会黑屏，以为是分辨率的问题，又上网搜了一堆东西，都没能解决，最终一顿折腾，找到了完美的解决方案，记录一下</p>
<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p>执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -d v1nn0 video</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gpasswd -d v1nn0 render</span><br></pre></td></tr></table></figure>
<p>注意了，执行时请把<code>v1nn0</code>替换成你的用户名！</p>
<h2 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h2><p>直接输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure>
<p>按照下图选择（使用键盘的小方向键选择）<br>System options<br><img data-src="/imgs/xrdphp-1.jpg" alt="1"><br>Boot &#x2F; Auto Login<br><img data-src="/imgs/xrdphp-2.jpg" alt="2"><br>Desktop GUI , requiring user to login<br><img data-src="/imgs/xrdphp-3.jpg" alt="3"></p>
<p>最后直接<code>Finish</code></p>
<p>确定重启树莓派即可！</p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>xrdp</tag>
        <tag>树莓派4B</tag>
        <tag>问题解决</tag>
        <tag>黑屏</tag>
        <tag>BUG</tag>
      </tags>
  </entry>
  <entry>
    <title>强大的视频下载工具Youtube-dl</title>
    <url>/article/16598.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>在小破站看到自己喜欢的视频，想保存下来，可是小破站的视频下载功能只能下载视频部分内容，而且还带水印💢<br>网上的在线解析下载也不是很多，而且说不定哪天就被蜀黍和阿姨咔嚓了<br>这篇文章教你如何使用一款名为<code>Youtube-dl</code>的工具下载视频<br>这个工具相对稳定，你看它的名字就知道是外国人制作的，叔叔不会连外国人都不放过罢（</p>
<h1 id="安装Pip"><a href="#安装Pip" class="headerlink" title="安装Pip"></a>安装Pip</h1><p>这个工具可以在大多命令行运行，需要通过pip安装<br>下面将以Utermux为例，演示安装步骤和使用方法，你也可以用termux，电脑可以是windows，ubuntu任何系统的命令行<br>输入命令<br>在termux上安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pkg install python3</span><br></pre></td></tr></table></figure>
<p>输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install python3 -y</span><br></pre></td></tr></table></figure>
<p>在具有apt包的系统上安装<br>如果你是windows的话，直接在Python官网下载python3环境即可<br><a href="https://www.python.org/">Python官网</a></p>
<h1 id="安装Youtube-dl"><a href="#安装Youtube-dl" class="headerlink" title="安装Youtube-dl"></a>安装Youtube-dl</h1><p>如果你是termux或windows<br>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install youtube-dl</span><br></pre></td></tr></table></figure>
<p>如果你是linux<br>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pip install youtube-dl</span><br></pre></td></tr></table></figure>
<p><img data-src="/imgs/youtubedl-1.jpg" alt="1"><br>等待运行完成即可</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">youtube-dl 你想要下载的b站视频的链接</span><br></pre></td></tr></table></figure>
<p>注意，这里是链接，https打头的那个！<br>当然也可以是youtube视频链接，方法同理<br><img data-src="/imgs/youtubedl-2.jpg" alt="2"><br>输入<code>ls</code>，如果你是windows就输入<code>dir</code><br><img data-src="/imgs/youtubedl-3.jpg" alt="3"><br>就能看到与你相下载的视频同名的文件了<br>如果你用的电脑，可以直接打开该目录查看视频<br>如果你用的termux或其他手机终端，我建议你把它copy到一个便于寻找的位置<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp 视频文件名 你想复制到地方</span><br></pre></td></tr></table></figure>
<p><img data-src="/imgs/youtubedl-4.jpg" alt="4"><br>即可<br>使用文件管理工具找到那个位置，就可以愉快的看视频了<br><img data-src="/imgs/youtubedl-5.jpg" alt="5"></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>youtube-dl</tag>
        <tag>termux</tag>
      </tags>
  </entry>
  <entry>
    <title>追加内容 JohnTheRipper的windows版下载及使用</title>
    <url>/article/6063.html</url>
    <content><![CDATA[<p>有的人可能没有kali，今天补一篇教大家用windows下载john破解zip</p>
<h1 id="需要准备"><a href="#需要准备" class="headerlink" title="需要准备"></a>需要准备</h1><ul>
<li>Windows</li>
<li>JohnTheRipper的其他系统版本</li>
<li>一个待破解的zip包</li>
</ul>
<p>首先需要下载你系统对应的版本<br><a href="https://www.openwall.com/john/">John官网</a><br>你可以在这里找到对应版本，但是不要下载john，要下载john的jumbo版，这个版本貌似是社区开发，里面包含了许多破解其他密码的模块插件等<br><a href="https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip">Win64</a><br><a href="https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win32.zip">Win32</a><br>下载好后应该是一个zip包，解压他，把它放到你能找到的地方，这里建议<br><code>最好不要放在桌面</code><br>可以放在D:盘<br>解压他到一个文件夹，这个文件夹命名为<code>john</code></p>
<h1 id="开始破解"><a href="#开始破解" class="headerlink" title="开始破解"></a>开始破解</h1><p>这里需要停一下，如果你没看过我写的那篇kali破解的教程，请务必去看一下，因为破解过程和kali没什么区别<br><a href="https://v1nnyawa.github.io/2022/12/13/John-The-Ripper-Crunch-%E7%A0%B4%E8%A7%A3zip%E5%AF%86%E7%A0%81/">Kali破解zip包教程</a><br>好的，在你看完那篇教程之后可以开始使用Windows破解了<br>把你待破解的<code>zip</code>包拖到john文件夹的<code>run</code>目录下，那里面有很多文件，所以在拖动前请给你的zip包起一个显眼的名字，如果你能找到，不起也可以<br>右键打开终端<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john.exe 你的zip包名 &gt; 解析后的hash文件名.hash</span><br></pre></td></tr></table></figure>
<p>这里你会发现，其实和kali没啥区别，只是在zip2john后加上<code>.exe</code>而已<br>执行后会在<code>run</code>目录生成一个和你输入的解析后的hash文件名同名的文件，那就是存储该zip包hash值的文件<br>输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john.exe 解析后的hash文件名.hash</span><br></pre></td></tr></table></figure>
<p>等待一会，密码应该可以出来（弱密码的情况下）<br>密码强一点的同理，和在kali一样，需要一个强大的字典，你也可以通过安装<code>crunch</code>来达到生成字典的目的，引用字典的方法和kali也一样，这里不过多赘述</p>
]]></content>
      <categories>
        <category>Kali</category>
      </categories>
      <tags>
        <tag>JohnTheRipper</tag>
      </tags>
  </entry>
  <entry>
    <title>终端IDE？WSlUbuntu&amp;Lunarvim！</title>
    <url>/article/47438.html</url>
    <content><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>前不久，我被neovim强大的拓展性吸引，想要配置并使用nvim，经过三个晚上的折腾，我疯了，原因是在安装插件时需要从github clone，我的网实在有些一言难尽，一天能成功安装一个插件就不错了，无奈之下只能放弃。<br>近来我又发现一款编辑器叫做<code>Lunarvim</code>，它主打的就是开箱即用，不再需要过多耗费精力且不必要的配置，我立刻就心动了，打算安装来试试，Lunarvim是基于neovim进行配置的，官方提供了windows，macos&#x2F;linux和docker试用三个版本，最初我打算安装windows的，不过因为环境配置太过麻烦，我又放弃了，最终选择了wsl安装ubuntu使用<br>结果告诉我，我的选择没有错</p>
<h1 id="开启适用于Linux的windows子系统和虚拟机平台"><a href="#开启适用于Linux的windows子系统和虚拟机平台" class="headerlink" title="开启适用于Linux的windows子系统和虚拟机平台"></a>开启适用于Linux的windows子系统和虚拟机平台</h1><blockquote>
<p>如果你以前使用过wsl子系统请跳过这步<br>如果你使用的是Linux或Macos请跳过这步</p>
</blockquote>
<p>windows下按<code>Win</code>+<code>Q</code>键，输入<code>启用或关闭Windows功能</code><br><img data-src="/imgs/lvim-1.jpg" alt="1"><br>勾选<code>开启适用于Linux的windows子系统</code>和<code>虚拟机平台</code>并确认，然后重启电脑</p>
<h1 id="升级为WSL2"><a href="#升级为WSL2" class="headerlink" title="升级为WSL2"></a>升级为WSL2</h1><blockquote>
<p>如果你以前使用过wsl子系统请跳过这步<br>如果你使用的是Linux或Macos请跳过这步</p>
</blockquote>
<p>访问<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2升级</a>下载升级包<br>双击安装即可<br>打开终端，输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wsl --<span class="built_in">set</span>-default-version <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>将WSL2设置为默认</p>
<h1 id="安装Linux发行版"><a href="#安装Linux发行版" class="headerlink" title="安装Linux发行版"></a>安装Linux发行版</h1><blockquote>
<p>如果你以前使用过wsl子系统请跳过这步<br>如果你使用的是Linux或Macos请跳过这步</p>
</blockquote>
<p>推荐安装ubuntu哦<br>打开windows应用商店，搜索<code>Ubuntu</code><br>安装Ubuntu</p>
<blockquote>
<p>最好安装只有Ubuntu字样的那个，不要安装带版本号的</p>
</blockquote>
<h1 id="Ubuntu子系统基础配置"><a href="#Ubuntu子系统基础配置" class="headerlink" title="Ubuntu子系统基础配置"></a>Ubuntu子系统基础配置</h1><blockquote>
<p>使用Ubuntu系统的同学也可以看看</p>
</blockquote>
<p>安装好后打开，输入<code>用户名</code>，<code>密码</code>回车即可<br>打开windows cmd输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wslconfig /l</span><br></pre></td></tr></table></figure>
<p>找到Ubuntu，看看后面的版本号，记下来</p>
<h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p>首先需要换源，如果你身处海外就不用换源了<br>访问<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华镜像站</a><br>选择你的版本号<br>并复制下面的源<br><img data-src="/imgs/lvim-2.jpg" alt="2"><br>打开Ubuntu子系统<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt &amp;&amp; sudo <span class="built_in">cp</span> sources.list sources.list.backup &amp;&amp; sudo <span class="built_in">rm</span> sources.list &amp;&amp; sudo nano sources.list</span><br></pre></td></tr></table></figure>
<p>它会要求你输入你的密码，就是一开始打开ubuntu子系统要求输入的密码<br>输入完成后就进入了nano界面，nano是一款文本编辑器，接下来你只需要把刚才在清华镜像站复制的源粘贴进来即可<br>然后按下<code>ctrl</code>+<code>x</code>然后<code>y</code>接着<code>Enter</code><br>即可<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>
<p>等待一会，中途会让你选择Y或N，选择Y<br>接着等，等全部执行完成后换源就完成了</p>
<h1 id="安装必须软件"><a href="#安装必须软件" class="headerlink" title="安装必须软件"></a>安装必须软件</h1><p>访问<a href="https://www.lunarvim.org/docs/installation">Lunarvim官网</a>查看先决条件<br><img data-src="/imgs/lvim-3.jpg" alt="3"></p>
<p>需要安装<code>Neovim</code>，<code>Git</code>，<code>Make</code>，<code>Pip</code>，<code>Python3</code>，<code>Npm</code>，<code>Nodejs</code>和<code>Cargo</code></p>
<p>执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git make python3 python3-pip nodejs npm cargo -y</span><br></pre></td></tr></table></figure>
<p>一键安装<br>你会发现了，这里面并没有Neovim啊，没错，apt安装的neovim版本太低了，lunarvim不支持，需要自己手动安装</p>
<h1 id="安装Neovim"><a href="#安装Neovim" class="headerlink" title="安装Neovim"></a>安装Neovim</h1><p>访问<a href="https://github.com/neovim/neovim/releases/download/v0.8.3/nvim-linux64.deb">Neovim</a>获取安装包<br>把它放在ubuntu根目录下<br>输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i nvim-linux64.deb</span><br></pre></td></tr></table></figure>
<p>安装nvim<br>完成后输入nvim检查是否安装成功</p>
<h1 id="Lunarvim安装"><a href="#Lunarvim安装" class="headerlink" title="Lunarvim安装"></a>Lunarvim安装</h1><p>接下来就该安装Lunarvim了<br>安装时必须要有Magic，具体是啥得自己体会😉<br>如果你在windows上开了Magic，对wsl是不生效的，需要在WSLUbuntu里配置代理</p>
<h1 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h1><blockquote>
<p>如果你以前使用过wsl子系统请跳过这步<br>如果你使用的是Linux或Macos请跳过这步<br>你可以直接在你的Linux桌面系统或Macos安装代理软件</p>
</blockquote>
<p>以<code>C</code> <code>L</code> <code>A</code> <code>S</code> <code>H</code>为例<br>需要在主页先打开<code>允许局域网</code>再开启代理<br>开启后打开Windows的cmd，输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ipconfig</span></span><br></pre></td></tr></table></figure>
<p>记下windows的ip地址<br>转到Ubuntu中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&#x27;socks5://xxx:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> all_proxy=<span class="string">&#x27;socks5://xxx:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&#x27;http://xxx:7890&#x27;</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&#x27;http://xxx:7890&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>XXX</code>替换为你的windows ip地址<br>即可<br>现在输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl google.com</span><br></pre></td></tr></table></figure>
<p>看是否有反应，有反应就是成功了</p>
<h1 id="正式安装Lunarvim"><a href="#正式安装Lunarvim" class="headerlink" title="正式安装Lunarvim"></a>正式安装Lunarvim</h1><p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LV_BRANCH=<span class="string">&#x27;release-1.3/neovim-0.9&#x27;</span> bash &lt;(curl -s https://raw.githubusercontent.com/LunarVim/LunarVim/release-1.3/neovim-0.9/utils/installer/install.sh)</span><br></pre></td></tr></table></figure>
<p>回车后会出现Lunarvim的字符画<br>他会问你几个问题，是否检查依赖<br>有node，python，rust三个选项<br>我只需要python所以只在python选了y<br>需要什么就装什么，但是建议rust那个别选y<br>可能会报错<br>等到最后安装完成，就可以用了</p>
<h1 id="配置快速启动"><a href="#配置快速启动" class="headerlink" title="配置快速启动"></a>配置快速启动</h1><p>安装完你会发现，lvim命令怎么不管用呢？？？？？？<br>其实你需要执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/你的用户名/.local/bin/lvim</span><br></pre></td></tr></table></figure>
<p>来运行<br>但是，太麻烦了，咱们来配置快捷命令<br>来到ubuntu根目录<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano .bashrc</span><br></pre></td></tr></table></figure>
<p>编辑.bashrc文件<br>在最后一行添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> lvim=<span class="string">&#x27;/home/你的用户名/.local/bin/lvim&#x27;</span></span><br></pre></td></tr></table></figure>
<p>保存退出<br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> .bashrc </span><br></pre></td></tr></table></figure>
<p>然后就可以用lvim命令快速启动了<br>这里要记住！再打开lunarvim之前开启你的Magic，因为初次启动软件他会自己下载一些插件等等，不开Magic没法下会<del>爆破</del>报错</p>
<h1 id="将wslubuntu添加到右键菜单"><a href="#将wslubuntu添加到右键菜单" class="headerlink" title="将wslubuntu添加到右键菜单"></a>将wslubuntu添加到右键菜单</h1><p>在windows下使用管理员权限打开powershell<br>输入</p>
<figure class="highlight pwsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> / &amp;&amp; <span class="built_in">cd</span> \Program Files\WindowsApps\</span><br></pre></td></tr></table></figure>
<p>然后输入</p>
<figure class="highlight pwsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
<p>查看该目录下的文件<br>找到带有<br><code>CanonicalGroupLimited.Ubuntu</code>字样的文件<br>应该会有多个，不是多个也没关系<br>找到带有x64的那个，cd进去，输入pwd得到路径，复制路径，备用</p>
<blockquote>
<p>下文中的路径就是指这个路径</p>
</blockquote>
<p>打开注册表编辑器<br>在上面的路径栏输入</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</span><br></pre></td></tr></table></figure>
<p>会自动定位到一个叫shell的文件夹<br>右键它，新建项，取名为<code>bash</code>，再右键<code>bash</code>新建项，取名<code>command</code>，再右键<code>bash</code>新建一个字符串项取名<code>Icon</code><br>点击<code>bash</code>，双击右边的默认，把数值数据改为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">用WSL bash打开</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Open with WSL bash</span><br></pre></td></tr></table></figure>

<p>再双击Icon<br>把数值数据改为刚才找到的路径+ubuntu.exe</p>
<blockquote>
<p>例如我的是<br>C:\Program Files\WindowsApps\CanonicalGroupLimited.Ubuntu_2204.2.33.0_x64__79rhkp1fndgsc\ubuntu.exe</p>
</blockquote>
<p>再点击<code>command</code>文件夹，双击右侧的默认<br>修改数值数据为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">刚才的路径+ -c bash&quot;&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例如我的路径是C:\Program Files\WindowsApps\CanonicalGroupLimited.Ubuntu_2204.2.33.0_x64__79rhkp1fndgsc\ubuntu.exe<br>我就应该改成<br>C:\Program Files\WindowsApps\CanonicalGroupLimited.Ubuntu_2204.2.33.0_x64__79rhkp1fndgsc\ubuntu.exe -c bash””</p>
</blockquote>
<p>确认即可<br>回到桌面实验下，如果你是win10直接右键就会看到<br>如果你是win11<br>按住shift再右键也可以看到<br>成功！</p>
<h2 id="卸载Lunarvim"><a href="#卸载Lunarvim" class="headerlink" title="卸载Lunarvim"></a>卸载Lunarvim</h2><p>打开代理<br>一行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash ~/.local/share/lunarvim/lvim/utils/installer/uninstall.sh</span><br></pre></td></tr></table></figure>
<p>即可</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>editor</tag>
        <tag>wsl</tag>
        <tag>ubuntu</tag>
        <tag>lunarvim</tag>
        <tag>vim</tag>
        <tag>ide</tag>
      </tags>
  </entry>
</search>
